{"version":3,"sources":["utils/serviceWorkerMessenger.js","components/PeopleTable.js","components/UserCreationForm.js","actions/getPeople.js","App.js","serviceWorker.js","index.js"],"names":["getSelectedPeople","navigator","serviceWorker","ready","then","Promise","resolve","reject","messageChannel","MessageChannel","port1","onmessage","event","data","error","controller","postMessage","eventType","port2","sendPersonSelectedMessage","person","sendPersonUnselectedMessage","PeopleTable","_ref","people","personSelected","personUnselected","sortPeople","sortedBy","sortedDescending","pageForward","pageBackward","deleteUser","arrow","react_default","a","createElement","nameHeader","emailHeader","style","width","cursor","onClick","undefined","map","key","Email","Name","Age","Balance","Address","selected","role","aria-label","Id","display","justifyContent","UserCreationForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createPerson","fetch","method","body","JSON","stringify","state","headers","Content-Type","result","console","log","refreshPeople","handleInput","change","setState","previousState","assign","_this2","inputStyle","marginTop","onChange","target","value","marginLeft","type","name","Component","getPeople","response","json","selectedPeople","find","element","App","GetPeople","p","sortBy","sortDescending","concat","skip","take","prevState","newSkip","personId","className","components_PeopleTable","sortByEmail","sortByName","components_UserCreationForm","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","register","registration","onupdatefound","installingWorker","installing","onstatechange","onUpdate","onSuccess","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a0032977.chunk.js","sourcesContent":["export const getSelectedPeople =  function () {\r\n    return navigator.serviceWorker.ready.then(() => {\r\n        return new Promise(function(resolve, reject){\r\n            // Create a Message Channel\r\n            var messageChannel = new MessageChannel();\r\n    \r\n            // Handler for recieving message reply from service worker\r\n            messageChannel.port1.onmessage = function(event){\r\n                if(event.data.error){\r\n                    reject(event.data.error);\r\n                }else{\r\n                    resolve(event.data);\r\n                }\r\n            };\r\n    \r\n            // Send message to service worker along with port for reply\r\n            navigator.serviceWorker.controller.postMessage({\r\n                eventType: 'getSelectedPeople'\r\n            }, [messageChannel.port2]);\r\n        });\r\n    });\r\n}\r\n\r\nexport const sendPersonSelectedMessage = function(person) {\r\n    return new Promise(function(resolve) {\r\n        navigator.serviceWorker.controller.postMessage({\r\n            eventType: 'personSelected',\r\n            person: person\r\n        });\r\n\r\n        resolve('Message Sent');\r\n    });\r\n    \r\n}\r\n\r\nexport const sendPersonUnselectedMessage = function(person) {\r\n    return new Promise(function(resolve) {\r\n        navigator.serviceWorker.controller.postMessage({\r\n            eventType: 'personUnselected',\r\n            person: person\r\n        });\r\n\r\n        resolve('Message Sent');\r\n    });\r\n}","import React from 'react'\r\n\r\nconst PeopleTable = function({ people, personSelected, personUnselected, sortPeople, sortedBy, sortedDescending, pageForward, pageBackward, deleteUser }) {\r\n\r\n    const arrow = sortedDescending === true ? <span>&#8595;</span> : <span>&#8593;</span>;\r\n\r\n    const nameHeader = sortedBy === 'name' ? <span>Name {arrow}</span> : <span>Name</span>;\r\n    const emailHeader = sortedBy === 'email' ? <span>Email {arrow}</span> : <span>Email</span>;\r\n\r\n    return (\r\n        <div style={{ width: 1000 }}>\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        <th style={{ cursor: 'pointer'  }} onClick={() => { sortPeople('name') }}>{nameHeader}</th>\r\n                        <th>Age</th>\r\n                        <th>Balance</th>\r\n                        <th style={{ cursor: 'pointer'  }} onClick={() => { sortPeople('email') }}>{emailHeader}</th>\r\n                        <th>Address</th>\r\n                    </tr>\r\n                    {\r\n                        people === undefined ? null :\r\n                        people.map((person) => {\r\n                            return (\r\n                                <tr key={person.Email}>\r\n                                    <td>{person.Name}</td>\r\n                                    <td>{person.Age}</td>\r\n                                    <td>{person.Balance}</td>\r\n                                    <td>{person.Email}</td>\r\n                                    <td>{person.Address}</td>\r\n                                    <td>\r\n                                        {\r\n                                            person.selected ? <span style={{ cursor: 'pointer'  }} onClick={() => { personUnselected(person) }} role='img' aria-label='Minus sign'>&#10134;</span> : \r\n                                                <span style={{ cursor: 'pointer'  }} onClick={() => { personSelected(person)}} role='img' aria-label='Plus sign'>&#10133;</span>\r\n                                        }\r\n                                    </td>\r\n                                    <td style={{ cursor: 'pointer'  }} onClick={() => deleteUser(person.Id)}>Delete User</td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n                <div style={{ cursor: 'pointer'  }} onClick={pageBackward}>\r\n                    &#8592; Page Backward\r\n                </div>\r\n                <div style={{ cursor: 'pointer'  }} onClick={pageForward}>\r\n                     Page Forward &#8594;\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default PeopleTable;","import React, { Component } from 'react';\r\n\r\nclass UserCreationForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            Name: '',\r\n            Email: '',\r\n            Address: '',\r\n            Balance: 0,\r\n            Age: 0\r\n        }\r\n\r\n        this.refreshPeople = props.refreshPeople;\r\n    }\r\n\r\n    createPerson = () => {\r\n        fetch('https://tech-test.azurewebsites.net/people', {\r\n            method: 'POST',\r\n            body: JSON.stringify(this.state),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            }\r\n        }).then((result) => {\r\n            console.log(result);\r\n            this.refreshPeople();\r\n        })\r\n    }\r\n\r\n    handleInput = (change) => {\r\n        this.setState((previousState) => {\r\n            return Object.assign({}, previousState, change);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const inputStyle = {\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            marginTop: 5\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <span>User Creation Form</span>\r\n                <div>\r\n                    <label style={inputStyle}>\r\n                        Name:\r\n                        <input onChange={event => this.handleInput({ Name: event.target.value })} style={{ marginLeft: 5 }} type=\"text\" name=\"name\" />\r\n                    </label>\r\n                    <label style={inputStyle}>\r\n                        Email:\r\n                        <input onChange={event => this.handleInput({ Email: event.target.value })} style={{ marginLeft: 5 }} type=\"text\" name=\"email\" />\r\n                    </label>\r\n                    <label style={inputStyle}>\r\n                        Address:\r\n                        <input onChange={event => this.handleInput({ Address: event.target.value })} style={{ marginLeft: 5 }} type=\"text\" name=\"address\" />\r\n                    </label>\r\n                    <label style={inputStyle}>\r\n                        Balance:\r\n                        <input onChange={event => this.handleInput({ Balance: event.target.value })} style={{ marginLeft: 5 }} type=\"number\" name=\"balance\" />\r\n                    </label>\r\n                    <label style={inputStyle}>\r\n                        Age:\r\n                        <input onChange={event => this.handleInput({ Age: event.target.value })} style={inputStyle} type=\"number\" name=\"age\" />\r\n                    </label>\r\n                    <input type=\"submit\" name=\"name\" onClick={this.createPerson} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserCreationForm;","import { getSelectedPeople } from '../utils/serviceWorkerMessenger'\r\n\r\nconst getPeople = () => {\r\n    return navigator.serviceWorker.ready.then(() => {\r\n        return fetch('https://tech-test.azurewebsites.net/people', {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((people) => {\r\n            return getSelectedPeople().then((selectedPeople) => {\r\n                return people.map((person) => {\r\n                    person.selected = selectedPeople.find((element) => {\r\n                        return element.Id === person.Id;\r\n                    });\r\n                    return person;\r\n                });\r\n            });\r\n        });\r\n    });\r\n    \r\n}\r\n\r\nexport default getPeople;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { getSelectedPeople, sendPersonSelectedMessage, sendPersonUnselectedMessage } from './utils/serviceWorkerMessenger'\r\nimport PeopleTable from './components/PeopleTable'\r\nimport UserCreationForm from './components/UserCreationForm'\r\nimport GetPeople from './actions/getPeople'\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            people: undefined,\r\n            sortedBy: 'name',\r\n            sortedDescending: false,\r\n            skip: 0,\r\n            take: 10\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshPeople();\r\n    }\r\n\r\n    refreshPeople = () => {\r\n        GetPeople().then((people) => {\r\n            this.setState({\r\n                people: people\r\n            });\r\n        });\r\n    }\r\n\r\n    personSelected = (person) => {\r\n        sendPersonSelectedMessage(person).then((result) => {\r\n            let previousState  = Object.assign({}, this.state);\r\n            let people = previousState.people;\r\n            let unselectedPerson = people.find((p) => p.Id === person.Id);\r\n            unselectedPerson.selected = true;\r\n            this.setState({\r\n                people: people\r\n            })\r\n        })\r\n    }\r\n\r\n    personUnselected = (person) => {\r\n        sendPersonUnselectedMessage(person).then((result) => {\r\n            let previousState  = Object.assign({}, this.state);\r\n            let people = previousState.people;\r\n            let unselectedPerson = people.find((p) => p.Id === person.Id);\r\n            unselectedPerson.selected = false;\r\n            this.setState({\r\n                people: people\r\n            })\r\n        })\r\n    }\r\n\r\n    sortPeople = (sortBy) => {\r\n        const sortDescending = this.state.sortedDescending === true ? false : true;\r\n\r\n        fetch(`https://tech-test.azurewebsites.net/people?sortBy=${sortBy}&sortDescending=${sortDescending}&skip=${this.state.skip}&take=${this.state.take}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((result) => {\r\n            getSelectedPeople().then((selectedPeople) => {\r\n                this.setState(prevState => {\r\n                    return {\r\n                        people: result.map((person) => {\r\n                            person.selected = selectedPeople.find((element) => {\r\n                                return element.Id === person.Id;\r\n                            });\r\n                            return person;\r\n                        }),\r\n                        sortedBy: sortBy,\r\n                        sortedDescending: prevState.sortedBy !== sortBy ? false : sortDescending\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    pageForward = () => {\r\n        const newSkip = this.state.skip + 10;\r\n\r\n        fetch(`https://tech-test.azurewebsites.net/people?sortBy=${this.state.sortedBy}&sortDescending=${this.state.sortedDescending}&skip=${newSkip}&take=${this.state.take}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((result) => {\r\n            getSelectedPeople().then((selectedPeople) => {\r\n                this.setState(prevState => {\r\n                    return {\r\n                        people: result.map((person) => {\r\n                            person.selected = selectedPeople.find((element) => {\r\n                                return element.Id === person.Id;\r\n                            });\r\n                            return person;\r\n                        }),\r\n                        skip: newSkip\r\n                    };\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    pageBackward = () => {\r\n        const newSkip = this.state.skip === 0 ? 0 : this.state.skip - 10;\r\n\r\n        fetch(`https://tech-test.azurewebsites.net/people?sortBy=${this.state.sortedBy}&sortDescending=${this.state.sortedDescending}&skip=${newSkip}&take=${this.state.take}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((result) => {\r\n            getSelectedPeople().then((selectedPeople) => {\r\n                this.setState(prevState => {\r\n                    return {\r\n                        people: result.map((person) => {\r\n                            person.selected = selectedPeople.find((element) => {\r\n                                return element.Id === person.Id;\r\n                            });\r\n                            return person;\r\n                        }),\r\n                        skip: newSkip\r\n                    };\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    deleteUser = (personId) => {\r\n        fetch(`https://tech-test.azurewebsites.net/people/${personId}`, {\r\n            method: 'DELETE'\r\n        }).then((result) => {\r\n            console.log(result);\r\n            this.refreshPeople();\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <div>Tech Test</div>\r\n                </header>\r\n                <div style={{ display: 'flex' }}>\r\n                    <div>\r\n                        <PeopleTable \r\n                            people={this.state.people} \r\n                            personSelected={this.personSelected} \r\n                            personUnselected={this.personUnselected} \r\n                            sortPeople={this.sortPeople}\r\n                            sortByEmail={this.sortByEmail} \r\n                            sortByName={this.sortByName} \r\n                            sortedBy={this.state.sortedBy}\r\n                            sortedDescending={this.state.sortedDescending}\r\n                            pageForward={this.pageForward} \r\n                            pageBackward={this.pageBackward}\r\n                            deleteUser={this.deleteUser} />\r\n                    </div>\r\n                    <UserCreationForm refreshPeople={this.refreshPeople} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker-custom.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}