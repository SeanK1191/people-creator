{"version":3,"sources":["utils/serviceWorkerMessenger.js","components/PeopleTable.js","App.js","serviceWorker.js","index.js"],"names":["getSelectedPeople","Promise","resolve","reject","messageChannel","MessageChannel","port1","onmessage","event","data","error","navigator","serviceWorker","controller","postMessage","eventType","port2","sendPersonSelectedMessage","person","sendPersonUnselectedMessage","PeopleTable","_ref","people","personSelected","personUnselected","sortPeople","sortedBy","sortedDescending","pageForward","pageBackward","arrow","react_default","a","createElement","nameHeader","emailHeader","style","width","cursor","onClick","undefined","map","key","Email","Name","Age","Balance","Address","selected","role","aria-label","display","justifyContent","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","then","result","assign","state","find","p","Id","setState","console","log","sortBy","sortDescending","fetch","concat","skip","take","headers","Content-Type","response","json","selectedPeople","prevState","element","newSkip","_this2","className","components_PeopleTable","sortByEmail","sortByName","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","register","registration","onupdatefound","installingWorker","installing","onstatechange","onUpdate","onSuccess","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e2d6b419.chunk.js","sourcesContent":["export const getSelectedPeople =  function () {\r\n    return new Promise(function(resolve, reject){\r\n        // Create a Message Channel\r\n        var messageChannel = new MessageChannel();\r\n\r\n        // Handler for recieving message reply from service worker\r\n        messageChannel.port1.onmessage = function(event){\r\n            if(event.data.error){\r\n                reject(event.data.error);\r\n            }else{\r\n                resolve(event.data);\r\n            }\r\n        };\r\n\r\n        // Send message to service worker along with port for reply\r\n        navigator.serviceWorker.controller.postMessage({\r\n            eventType: 'getSelectedPeople'\r\n        }, [messageChannel.port2]);\r\n    });\r\n}\r\n\r\nexport const sendPersonSelectedMessage = function(person) {\r\n    return new Promise(function(resolve) {\r\n        navigator.serviceWorker.controller.postMessage({\r\n            eventType: 'personSelected',\r\n            person: person\r\n        });\r\n\r\n        resolve('Message Sent');\r\n    });\r\n    \r\n}\r\n\r\nexport const sendPersonUnselectedMessage = function(person) {\r\n    return new Promise(function(resolve) {\r\n        navigator.serviceWorker.controller.postMessage({\r\n            eventType: 'personUnselected',\r\n            person: person\r\n        });\r\n\r\n        resolve('Message Sent');\r\n    });\r\n}","import React from 'react'\r\n\r\nconst PeopleTable = function({ people, personSelected, personUnselected, sortPeople, sortedBy, sortedDescending, pageForward, pageBackward }) {\r\n\r\n    const arrow = sortedDescending === true ? <span>&#8595;</span> : <span>&#8593;</span>;\r\n\r\n    const nameHeader = sortedBy === 'name' ? <span>Name {arrow}</span> : <span>Name</span>;\r\n    const emailHeader = sortedBy === 'email' ? <span>Email {arrow}</span> : <span>Email</span>;\r\n\r\n    return (\r\n        <div style={{ width: 800 }}>\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        <th style={{ cursor: 'pointer'  }} onClick={() => { sortPeople('name') }}>{nameHeader}</th>\r\n                        <th>Age</th>\r\n                        <th>Balance</th>\r\n                        <th style={{ cursor: 'pointer'  }} onClick={() => { sortPeople('email') }}>{emailHeader}</th>\r\n                        <th>Address</th>\r\n                    </tr>\r\n                    {\r\n                        people === undefined ? null :\r\n                        people.map((person) => {\r\n                            return (\r\n                                <tr key={person.Email}>\r\n                                    <td>{person.Name}</td>\r\n                                    <td>{person.Age}</td>\r\n                                    <td>{person.Balance}</td>\r\n                                    <td>{person.Email}</td>\r\n                                    <td>{person.Address}</td>\r\n                                    <td>\r\n                                        {\r\n                                            person.selected ? <span style={{ cursor: 'pointer'  }} onClick={() => { personUnselected(person) }} role='img' aria-label='Minus sign'>&#10134;</span> : \r\n                                                <span style={{ cursor: 'pointer'  }} onClick={() => { personSelected(person)}} role='img' aria-label='Plus sign'>&#10133;</span>\r\n                                        }\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n                <div onClick={pageBackward}>\r\n                    &#8592; Page Backward\r\n                </div>\r\n                <div onClick={pageForward}>\r\n                     Page Forward &#8594;\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default PeopleTable;","import React, { Component } from 'react';\nimport './App.css';\nimport { getSelectedPeople, sendPersonSelectedMessage, sendPersonUnselectedMessage } from './utils/serviceWorkerMessenger'\nimport PeopleTable from './components/PeopleTable'\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            people: undefined,\n            sortedBy: 'name',\n            sortedDescending: false,\n            skip: 0,\n            take: 10\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://tech-test.azurewebsites.net/people', {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then((response) => {\n            return response.json();\n        }).then((result) => {\n            getSelectedPeople().then((selectedPeople) => {\n                this.setState({\n                    people: result.map((person) => {\n                        person.selected = selectedPeople.find((element) => {\n                            return element.Id === person.Id;\n                        });\n                        return person;\n                    })\n                })\n            });\n        });\n    }\n\n    personSelected = (person) => {\n        sendPersonSelectedMessage(person).then((result) => {\n            let previousState  = Object.assign({}, this.state);\n            let people = previousState.people;\n            let unselectedPerson = people.find((p) => p.Id === person.Id);\n            unselectedPerson.selected = true;\n            this.setState({\n                people: people\n            })\n        })\n    }\n\n    personUnselected = (person) => {\n        console.log(this.state);\n\n        sendPersonUnselectedMessage(person).then((result) => {\n            let previousState  = Object.assign({}, this.state);\n            let people = previousState.people;\n            let unselectedPerson = people.find((p) => p.Id === person.Id);\n            unselectedPerson.selected = false;\n            this.setState({\n                people: people\n            })\n        })\n    }\n\n    sortPeople = (sortBy) => {\n        const sortDescending = this.state.sortedDescending === true ? false : true;\n\n        fetch(`https://tech-test.azurewebsites.net/people?sortBy=${sortBy}&sortDescending=${sortDescending}&skip=${this.state.skip}&take=${this.state.take}`, {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then((response) => {\n            return response.json();\n        }).then((result) => {\n            getSelectedPeople().then((selectedPeople) => {\n                this.setState(prevState => {\n                    return {\n                        people: result.map((person) => {\n                            person.selected = selectedPeople.find((element) => {\n                                return element.Id === person.Id;\n                            });\n                            return person;\n                        }),\n                        sortedBy: sortBy,\n                        sortedDescending: prevState.sortedBy !== sortBy ? false : sortDescending\n                    }\n                });\n            });\n        });\n    }\n\n    pageForward = () => {\n        const newSkip = this.state.skip + 10;\n\n        fetch(`https://tech-test.azurewebsites.net/people?sortBy=${this.state.sortedBy}&sortDescending=${this.state.sortedDescending}&skip=${newSkip}&take=${this.state.take}`, {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then((response) => {\n            return response.json();\n        }).then((result) => {\n            getSelectedPeople().then((selectedPeople) => {\n                this.setState(prevState => {\n                    return {\n                        people: result.map((person) => {\n                            person.selected = selectedPeople.find((element) => {\n                                return element.Id === person.Id;\n                            });\n                            return person;\n                        }),\n                        skip: newSkip\n                    };\n                });\n            });\n        });\n    }\n\n    pageBackward = () => {\n        const newSkip = this.state.skip === 0 ? 0 : this.state.skip - 10;\n\n        fetch(`https://tech-test.azurewebsites.net/people?sortBy=${this.state.sortedBy}&sortDescending=${this.state.sortedDescending}&skip=${newSkip}&take=${this.state.take}`, {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then((response) => {\n            return response.json();\n        }).then((result) => {\n            getSelectedPeople().then((selectedPeople) => {\n                this.setState(prevState => {\n                    return {\n                        people: result.map((person) => {\n                            person.selected = selectedPeople.find((element) => {\n                                return element.Id === person.Id;\n                            });\n                            return person;\n                        }),\n                        skip: newSkip\n                    };\n                });\n            });\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <div>Tech Test</div>\n                </header>\n                <PeopleTable \n                    people={this.state.people} \n                    personSelected={this.personSelected} \n                    personUnselected={this.personUnselected} \n                    sortPeople={this.sortPeople}\n                    sortByEmail={this.sortByEmail} \n                    sortByName={this.sortByName} \n                    sortedBy={this.state.sortedBy}\n                    sortedDescending={this.state.sortedDescending}\n                    pageForward={this.pageForward} \n                    pageBackward={this.pageBackward} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker-custom.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}